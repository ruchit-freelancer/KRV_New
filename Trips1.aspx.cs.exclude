using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.Security;
using Telerik.Web.UI;

public partial class Trips1 : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {

    }

    #region Trips

    protected void imgActive_Click(object sender, EventArgs e)
    {
        MembershipUser user = Membership.GetUser();
        if (user != null)
        {
            string id = ((ImageButton)sender).CommandArgument.ToString();
            sdsSoftDelete.UpdateParameters["TripID"].DefaultValue = id;
            sdsSoftDelete.UpdateParameters["UserName"].DefaultValue = user.UserName;
            sdsSoftDelete.Update();
            rtsTrips.Tabs[0].Selected = true;
            rgSearch.Rebind();
        }
    }

    protected void imgDetails_Click(object sender, EventArgs e)
    {
        string id = ((ImageButton)sender).CommandArgument.ToString();
        hfTripID.Value = id;
        sdsTripStops.SelectParameters["TripID"].DefaultValue = hfTripID.Value;
        sdsTripRoutes.SelectParameters["TripID"].DefaultValue = hfTripID.Value;
        sdsTripRouteNotSelected.SelectParameters["TripID"].DefaultValue = hfTripID.Value;
        sdsStateTravelled.SelectParameters["TripID"].DefaultValue = hfTripID.Value;
        sdsTripIncidents.SelectParameters["TripID"].DefaultValue = hfTripID.Value;
        rtsTrips.Tabs[1].Enabled = true;
        rtsTrips.Tabs[2].Enabled = true;
        rtsTrips.Tabs[3].Enabled = true;
        rtsTrips.Tabs[4].Enabled = true;
        rtsTrips.Tabs[1].Selected = true;
    }

    protected void RadGrid1_ItemDeleted(object source, GridDeletedEventArgs e)
    {
        String id = e.Item.GetDataKeyValue("TripID").ToString();
        if (e.Exception != null)
        {
            e.ExceptionHandled = true;
            DisplayMessage(rgSearch, false, "Trip " + id + " cannot be deleted. Reason: " + e.Exception.Message);
        }
        else
        {
            if (e.AffectedRows > 0)
            {
                DisplayMessage(rgSearch, true, "Trip " + id + " deleted.");
            }
            else
            {
                DisplayMessage(rgSearch, false, "Trip " + id + " cannot be deleted. Reason: It is in active state");
            }
        }
    }

    protected void RadGrid1_InsertCommand(object source, GridCommandEventArgs e)
    {
        MembershipUser user = Membership.GetUser();
        if (user != null)
        {
            try
            {
                if (e.CommandName == "PerformInsert")
                {
                    if (e.Item is GridEditFormItem)
                    {
                        //Get the GridEditableItem of the RadGrid    
                        GridEditFormItem item = (GridEditFormItem)e.Item;

                        //Access the textbox from the edit form template
                        RadComboBox rcmbTrucks = (RadComboBox)item.FindControl("rcmbTrucks");
                        RadComboBox rcmbDriver = (RadComboBox)item.FindControl("rcmbDriver");
                        RadComboBox rcmbTripType = (RadComboBox)item.FindControl("rcmbTripType");
                        RadDatePicker rdtpTripDate = (RadDatePicker)item.FindControl("rdtpTripDate");
                        RadDatePicker rdtpTripStart = (RadDatePicker)item.FindControl("rdtpTripStart");
                        RadDatePicker rdtpTripEnd = (RadDatePicker)item.FindControl("rdtpTripEnd");
                        RadNumericTextBox txtStartOdometer = (RadNumericTextBox)item.FindControl("txtStartOdometer");
                        RadNumericTextBox txtEndOdometer = (RadNumericTextBox)item.FindControl("txtEndOdometer");

                        sdsAddEditRecords.InsertParameters["TruckID"].DefaultValue = rcmbTrucks.SelectedValue.ToString();
                        sdsAddEditRecords.InsertParameters["DriverID"].DefaultValue = rcmbDriver.SelectedValue.ToString();
                        sdsAddEditRecords.InsertParameters["TripTypeID"].DefaultValue = rcmbTripType.SelectedValue.ToString();
                        if (rdtpTripDate.SelectedDate.HasValue)
                        {
                            sdsAddEditRecords.InsertParameters["TripDate"].DefaultValue = rdtpTripDate.SelectedDate.Value.ToShortDateString();
                        }
                        else
                        {
                            sdsAddEditRecords.InsertParameters["TripDate"].DefaultValue = DBNull.Value.ToString();
                        }

                        if (rdtpTripStart.SelectedDate.HasValue)
                        {
                            sdsAddEditRecords.InsertParameters["TripStart"].DefaultValue = rdtpTripStart.SelectedDate.Value.ToShortDateString();
                        }
                        else
                        {
                            sdsAddEditRecords.InsertParameters["TripStart"].DefaultValue = DBNull.Value.ToString();
                        }

                        if (rdtpTripEnd.SelectedDate.HasValue)
                        {
                            sdsAddEditRecords.InsertParameters["TripEnd"].DefaultValue = rdtpTripEnd.SelectedDate.Value.ToShortDateString();
                        }
                        else
                        {
                            sdsAddEditRecords.InsertParameters["TripEnd"].DefaultValue = DBNull.Value.ToString();
                        }

                        if (txtStartOdometer.Value.HasValue)
                        {
                            sdsAddEditRecords.InsertParameters["StartOdometer"].DefaultValue = txtStartOdometer.Value.Value.ToString();
                        }
                        else
                        {
                            sdsAddEditRecords.InsertParameters["StartOdometer"].DefaultValue = "0";
                        }

                        if (txtEndOdometer.Value.HasValue)
                        {
                            sdsAddEditRecords.InsertParameters["EndOdometer"].DefaultValue = txtEndOdometer.Value.Value.ToString();
                        }
                        else
                        {
                            sdsAddEditRecords.InsertParameters["EndOdometer"].DefaultValue = "0";
                        }
                        sdsAddEditRecords.InsertParameters["UserName"].DefaultValue = user.UserName;
                        int result = sdsAddEditRecords.Insert();
                        DisplayMessage(rgSearch, true, WebHelper.GetSaveSuccess());
                    }
                }
            }
            catch (Exception ex)
            {
                DisplayMessage(rgSearch, false, WebHelper.GetSaveFail() + ". Reason: " + ex.Message);
                e.Canceled = true;
            }
        }
    }

    protected void RadGrid1_UpdateCommand(object source, GridCommandEventArgs e)
    {
        MembershipUser user = Membership.GetUser();
        if (user != null)
        {
            try
            {
                if (e.CommandName == RadGrid.UpdateCommandName)
                {
                    if (e.Item is GridEditFormItem)
                    {
                        //Get the GridEditableItem of the RadGrid    
                        GridEditFormItem item = (GridEditFormItem)e.Item;

                        //Get the primary key value using the DataKeyValue.    
                        string tripID = item.GetDataKeyValue("TripID").ToString();
                        //Access the textbox from the edit form template
                        RadComboBox rcmbTrucks = (RadComboBox)item.FindControl("rcmbTrucks");
                        RadComboBox rcmbDriver = (RadComboBox)item.FindControl("rcmbDriver");
                        RadComboBox rcmbTripType = (RadComboBox)item.FindControl("rcmbTripType");
                        RadDatePicker rdtpTripDate = (RadDatePicker)item.FindControl("rdtpTripDate");
                        RadDatePicker rdtpTripStart = (RadDatePicker)item.FindControl("rdtpTripStart");
                        RadDatePicker rdtpTripEnd = (RadDatePicker)item.FindControl("rdtpTripEnd");
                        RadNumericTextBox txtStartOdometer = (RadNumericTextBox)item.FindControl("txtStartOdometer");
                        RadNumericTextBox txtEndOdometer = (RadNumericTextBox)item.FindControl("txtEndOdometer");

                        sdsAddEditRecords.UpdateParameters["TripID"].DefaultValue = tripID;
                        sdsAddEditRecords.UpdateParameters["TruckID"].DefaultValue = rcmbTrucks.SelectedValue.ToString();
                        sdsAddEditRecords.UpdateParameters["DriverID"].DefaultValue = rcmbDriver.SelectedValue.ToString();
                        sdsAddEditRecords.UpdateParameters["TripTypeID"].DefaultValue = rcmbTripType.SelectedValue.ToString();
                        if (rdtpTripDate.SelectedDate.HasValue)
                        {
                            sdsAddEditRecords.UpdateParameters["TripDate"].DefaultValue = rdtpTripDate.SelectedDate.Value.ToShortDateString();
                        }
                        else
                        {
                            sdsAddEditRecords.UpdateParameters["TripDate"].DefaultValue = DBNull.Value.ToString();
                        }

                        if (rdtpTripStart.SelectedDate.HasValue)
                        {
                            sdsAddEditRecords.UpdateParameters["TripStart"].DefaultValue = rdtpTripStart.SelectedDate.Value.ToShortDateString();
                        }
                        else
                        {
                            sdsAddEditRecords.UpdateParameters["TripStart"].DefaultValue = DBNull.Value.ToString();
                        }

                        if (rdtpTripEnd.SelectedDate.HasValue)
                        {
                            sdsAddEditRecords.UpdateParameters["TripEnd"].DefaultValue = rdtpTripEnd.SelectedDate.Value.ToShortDateString();
                        }
                        else
                        {
                            sdsAddEditRecords.UpdateParameters["TripEnd"].DefaultValue = DBNull.Value.ToString();
                        }

                        if (txtStartOdometer.Value.HasValue)
                        {
                            sdsAddEditRecords.UpdateParameters["StartOdometer"].DefaultValue = txtStartOdometer.Value.Value.ToString();
                        }
                        else
                        {
                            sdsAddEditRecords.UpdateParameters["StartOdometer"].DefaultValue = "0";
                        }

                        if (txtEndOdometer.Value.HasValue)
                        {
                            sdsAddEditRecords.UpdateParameters["EndOdometer"].DefaultValue = txtEndOdometer.Value.Value.ToString();
                        }
                        else
                        {
                            sdsAddEditRecords.UpdateParameters["EndOdometer"].DefaultValue = "0";
                        }
                        sdsAddEditRecords.UpdateParameters["UserName"].DefaultValue = user.UserName;
                        int result = sdsAddEditRecords.Update();
                        DisplayMessage(rgSearch, true, WebHelper.GetUpdateSuccess());
                    }
                }
            }
            catch (Exception ex)
            {
                DisplayMessage(rgSearch, false, WebHelper.GetUpdateFail() + ". Reason: " + ex.Message);
                e.Canceled = true;
            }
        }
    }

    #endregion

    #region Trip Stops

    protected void imgActiveTripStops_Click(object sender, EventArgs e)
    {
        MembershipUser user = Membership.GetUser();
        if (user != null)
        {
            string id = ((ImageButton)sender).CommandArgument.ToString();
            sdsSoftDeleteTripStops.UpdateParameters["StopID"].DefaultValue = id;
            sdsSoftDeleteTripStops.UpdateParameters["UserName"].DefaultValue = user.UserName;
            sdsSoftDeleteTripStops.Update();
            rgTripStops.Rebind();
        }
    }

    protected void rgTripStops_ItemDeleted(object source, GridDeletedEventArgs e)
    {
        String id = e.Item.GetDataKeyValue("StopID").ToString();
        if (e.Exception != null)
        {
            e.ExceptionHandled = true;
            DisplayMessage(rgTripStops, false, "Stop " + id + " cannot be deleted. Reason: " + e.Exception.Message);
        }
        else
        {
            if (e.AffectedRows > 0)
            {
                DisplayMessage(rgTripStops, true, "Stop " + id + " deleted.");
            }
            else
            {
                DisplayMessage(rgTripStops, false, "Stop " + id + " cannot be deleted. Reason: It is in active state");
            }
        }
    }

    protected void rgTripStops_InsertCommand(object source, GridCommandEventArgs e)
    {
        MembershipUser user = Membership.GetUser();
        if (user != null)
        {
            try
            {
                if (e.CommandName == "PerformInsert")
                {
                    if (e.Item is GridEditFormItem)
                    {
                        //Get the GridEditableItem of the RadGrid    
                        GridEditFormItem item = (GridEditFormItem)e.Item;

                        //Access the textbox from the edit form template
                        RadComboBox rcmbCustomers = (RadComboBox)item.FindControl("rcmbCustomers");
                        RadComboBox rcmbStopTypes = (RadComboBox)item.FindControl("rcmbStopTypes");
                        TextBox txtStopIndex = (TextBox)item.FindControl("txtStopIndex");
                        TextBox txtBOLNumber = (TextBox)item.FindControl("txtBOLNumber");
                        RadTimePicker rtpArrivalTime = (RadTimePicker)item.FindControl("rtpArrivalTime");
                        RadTimePicker rtpDepartureTime = (RadTimePicker)item.FindControl("rtpDepartureTime");
                        RadNumericTextBox txtSlabsDelivered = (RadNumericTextBox)item.FindControl("txtSlabsDelivered");
                        RadNumericTextBox txtSlabsPickedUp = (RadNumericTextBox)item.FindControl("txtSlabsPickedUp");
                        RadNumericTextBox txtStopOdometer = (RadNumericTextBox)item.FindControl("txtStopOdometer");

                        sdsTripStops.InsertParameters["TripID"].DefaultValue = hfTripID.Value.ToString();
                        sdsTripStops.InsertParameters["StopIndex"].DefaultValue = txtStopIndex.Text.Trim();
                        sdsTripStops.InsertParameters["CustomerID"].DefaultValue = rcmbCustomers.SelectedValue.ToString();
                        sdsTripStops.InsertParameters["StopTypeID"].DefaultValue = rcmbStopTypes.SelectedValue.ToString();
                        sdsTripStops.InsertParameters["BOLNumber"].DefaultValue = txtBOLNumber.Text.Trim();

                        if (rtpArrivalTime.SelectedDate.HasValue)
                        {
                            sdsTripStops.InsertParameters["ArrivalTime"].DefaultValue = rtpArrivalTime.SelectedDate.Value.ToShortDateString();
                        }
                        else
                        {
                            sdsTripStops.InsertParameters["ArrivalTime"].DefaultValue = DBNull.Value.ToString();
                        }

                        if (rtpDepartureTime.SelectedDate.HasValue)
                        {
                            sdsTripStops.InsertParameters["DepartureTime"].DefaultValue = rtpDepartureTime.SelectedDate.Value.ToShortDateString();
                        }
                        else
                        {
                            sdsTripStops.InsertParameters["DepartureTime"].DefaultValue = DBNull.Value.ToString();
                        }

                        if (txtSlabsDelivered.Value.HasValue)
                        {
                            sdsTripStops.InsertParameters["SlabsDelivered"].DefaultValue = txtSlabsDelivered.Value.Value.ToString();
                        }
                        else
                        {
                            sdsTripStops.InsertParameters["SlabsDelivered"].DefaultValue = "0";
                        }

                        if (txtSlabsPickedUp.Value.HasValue)
                        {
                            sdsTripStops.InsertParameters["SlabsPickedUp"].DefaultValue = txtSlabsPickedUp.Value.Value.ToString();
                        }
                        else
                        {
                            sdsTripStops.InsertParameters["SlabsPickedUp"].DefaultValue = "0";
                        }

                        if (txtStopOdometer.Value.HasValue)
                        {
                            sdsTripStops.InsertParameters["StopOdometer"].DefaultValue = txtStopOdometer.Value.Value.ToString();
                        }
                        else
                        {
                            sdsTripStops.InsertParameters["StopOdometer"].DefaultValue = "0";
                        }
                        sdsTripStops.InsertParameters["UserName"].DefaultValue = user.UserName;
                        int result = sdsTripStops.Insert();
                        DisplayMessage(rgTripStops, true, WebHelper.GetSaveSuccess());
                    }
                }
            }
            catch (Exception ex)
            {
                DisplayMessage(rgTripStops, false, WebHelper.GetSaveFail() + ". Reason: " + ex.Message);
                e.Canceled = true;
            }
        }
    }

    protected void rgTripStops_UpdateCommand(object source, GridCommandEventArgs e)
    {
        MembershipUser user = Membership.GetUser();
        if (user != null)
        {
            try
            {
                if (e.CommandName == RadGrid.UpdateCommandName)
                {
                    if (e.Item is GridEditFormItem)
                    {
                        //Get the GridEditableItem of the RadGrid    
                        GridEditFormItem item = (GridEditFormItem)e.Item;

                        //Get the primary key value using the DataKeyValue.    
                        string stopID = item.GetDataKeyValue("StopID").ToString();
                        //Access the textbox from the edit form template
                        RadComboBox rcmbCustomers = (RadComboBox)item.FindControl("rcmbCustomers");
                        RadComboBox rcmbStopTypes = (RadComboBox)item.FindControl("rcmbStopTypes");
                        TextBox txtStopIndex = (TextBox)item.FindControl("txtStopIndex");
                        TextBox txtBOLNumber = (TextBox)item.FindControl("txtBOLNumber");
                        RadTimePicker rtpArrivalTime = (RadTimePicker)item.FindControl("rtpArrivalTime");
                        RadTimePicker rtpDepartureTime = (RadTimePicker)item.FindControl("rtpDepartureTime");
                        RadNumericTextBox txtSlabsDelivered = (RadNumericTextBox)item.FindControl("txtSlabsDelivered");
                        RadNumericTextBox txtSlabsPickedUp = (RadNumericTextBox)item.FindControl("txtSlabsPickedUp");
                        RadNumericTextBox txtStopOdometer = (RadNumericTextBox)item.FindControl("txtStopOdometer");

                        sdsTripStops.UpdateParameters["StopID"].DefaultValue = stopID;
                        sdsTripStops.UpdateParameters["StopIndex"].DefaultValue = txtStopIndex.Text.Trim();
                        sdsTripStops.UpdateParameters["CustomerID"].DefaultValue = rcmbCustomers.SelectedValue.ToString();
                        sdsTripStops.UpdateParameters["StopTypeID"].DefaultValue = rcmbStopTypes.SelectedValue.ToString();
                        sdsTripStops.UpdateParameters["BOLNumber"].DefaultValue = txtBOLNumber.Text.Trim();

                        if (rtpArrivalTime.SelectedDate.HasValue)
                        {
                            sdsTripStops.UpdateParameters["ArrivalTime"].DefaultValue = rtpArrivalTime.SelectedDate.Value.ToShortDateString();
                        }
                        else
                        {
                            sdsTripStops.UpdateParameters["ArrivalTime"].DefaultValue = DBNull.Value.ToString();
                        }

                        if (rtpDepartureTime.SelectedDate.HasValue)
                        {
                            sdsTripStops.UpdateParameters["DepartureTime"].DefaultValue = rtpDepartureTime.SelectedDate.Value.ToShortDateString();
                        }
                        else
                        {
                            sdsTripStops.UpdateParameters["DepartureTime"].DefaultValue = DBNull.Value.ToString();
                        }

                        if (txtSlabsDelivered.Value.HasValue)
                        {
                            sdsTripStops.UpdateParameters["SlabsDelivered"].DefaultValue = txtSlabsDelivered.Value.Value.ToString();
                        }
                        else
                        {
                            sdsTripStops.UpdateParameters["SlabsDelivered"].DefaultValue = "0";
                        }

                        if (txtSlabsPickedUp.Value.HasValue)
                        {
                            sdsTripStops.UpdateParameters["SlabsPickedUp"].DefaultValue = txtSlabsPickedUp.Value.Value.ToString();
                        }
                        else
                        {
                            sdsTripStops.UpdateParameters["SlabsPickedUp"].DefaultValue = "0";
                        }

                        if (txtStopOdometer.Value.HasValue)
                        {
                            sdsTripStops.UpdateParameters["StopOdometer"].DefaultValue = txtStopOdometer.Value.Value.ToString();
                        }
                        else
                        {
                            sdsTripStops.UpdateParameters["StopOdometer"].DefaultValue = "0";
                        }
                        sdsTripStops.UpdateParameters["UserName"].DefaultValue = user.UserName;
                        int result = sdsTripStops.Update();
                        DisplayMessage(rgTripStops, true, WebHelper.GetUpdateSuccess());
                    }
                }
            }
            catch (Exception ex)
            {
                DisplayMessage(rgTripStops, false, WebHelper.GetUpdateFail() + ". Reason: " + ex.Message);
                e.Canceled = true;
            }
        }
    }

    #endregion

    #region Trip Routes

    protected void imgAddTripRoutes_Click(object sender, EventArgs e)
    {
        MembershipUser user = Membership.GetUser();
        if (user != null)
        {
            sdsTripRouteNotSelected.InsertParameters["TripID"].DefaultValue = hfTripID.Value;
            sdsTripRouteNotSelected.InsertParameters["RouteID"].DefaultValue = hfTripID.Value;
            sdsTripRouteNotSelected.InsertParameters["UserName"].DefaultValue = user.UserName;
            sdsTripRouteNotSelected.Insert();
            DisplayMessage(rgTripRoutesNotSelected, true, WebHelper.GetSaveSuccess());
            rgTripRoutesNotSelected.Rebind();
            rgTripRoutes.Rebind();
        }
    }

    protected void imgActiveTripRoutes_Click(object sender, EventArgs e)
    {
        MembershipUser user = Membership.GetUser();
        if (user != null)
        {
            string id = ((ImageButton)sender).CommandArgument.ToString();
            sdsTripRoutes.UpdateParameters["TripRouteID"].DefaultValue = id;
            sdsTripRoutes.UpdateParameters["UserName"].DefaultValue = user.UserName;
            sdsTripRoutes.Update();
            rgTripRoutesNotSelected.Rebind();
            rgTripRoutes.Rebind();
        }
    }

    protected void rgTripRoutes_ItemDeleted(object source, GridDeletedEventArgs e)
    {
        String id = e.Item.GetDataKeyValue("TripRouteID").ToString();
        if (e.Exception != null)
        {
            e.ExceptionHandled = true;
            DisplayMessage(rgTripRoutes, false, "Trip-Route " + id + " cannot be deleted. Reason: " + e.Exception.Message);
        }
        else
        {
            if (e.AffectedRows > 0)
            {
                rgTripRoutesNotSelected.Rebind();
                DisplayMessage(rgTripRoutes, true, "Trip-Route " + id + " deleted.");
            }
            else
            {
                DisplayMessage(rgTripRoutes, false, "Trip-Route " + id + " cannot be deleted. Reason: It is in active state");
            }
        }
    }

    #endregion

    #region Trip - State Travelled

    protected void imgActiveStateTravelled_Click(object sender, EventArgs e)
    {
        MembershipUser user = Membership.GetUser();
        if (user != null)
        {
            string id = ((ImageButton)sender).CommandArgument.ToString();
            sdsSoftDeleteStateTravelled.UpdateParameters["TravelledID"].DefaultValue = id;
            sdsSoftDeleteStateTravelled.UpdateParameters["UserName"].DefaultValue = user.UserName;
            sdsSoftDeleteStateTravelled.Update();
            rgStateTravelled.Rebind();
        }
    }

    protected void StateTravelled_ItemDeleted(object source, GridDeletedEventArgs e)
    {
        String id = e.Item.GetDataKeyValue("TravelledID").ToString();
        if (e.Exception != null)
        {
            e.ExceptionHandled = true;
            DisplayMessage(rgStateTravelled, false, "Travelled " + id + " cannot be deleted. Reason: " + e.Exception.Message);
        }
        else
        {
            if (e.AffectedRows > 0)
            {
                DisplayMessage(rgStateTravelled, true, "Travelled " + id + " deleted.");
            }
            else
            {
                DisplayMessage(rgStateTravelled, false, "Travelled " + id + " cannot be deleted. Reason: It is in active state");
            }
        }
    }

    protected void StateTravelled_InsertCommand(object source, GridCommandEventArgs e)
    {
        MembershipUser user = Membership.GetUser();
        if (user != null)
        {
            try
            {
                if (e.CommandName == "PerformInsert")
                {
                    if (e.Item is GridEditFormItem)
                    {
                        //Get the GridEditableItem of the RadGrid    
                        GridEditFormItem item = (GridEditFormItem)e.Item;

                        //Access the textbox from the edit form template
                        RadComboBox rcmbStateName = (RadComboBox)item.FindControl("rcmbStateName");
                        RadNumericTextBox txtStartOdometer = (RadNumericTextBox)item.FindControl("txtStartOdometer");
                        RadNumericTextBox txtEndOdometer = (RadNumericTextBox)item.FindControl("txtEndOdometer");

                        sdsStateTravelled.InsertParameters["TripID"].DefaultValue = hfTripID.Value;
                        sdsStateTravelled.InsertParameters["StateID"].DefaultValue = rcmbStateName.SelectedValue.ToString();

                        if (txtStartOdometer.Value.HasValue)
                        {
                            sdsStateTravelled.InsertParameters["StartOdometer"].DefaultValue = txtStartOdometer.Value.Value.ToString();
                        }
                        else
                        {
                            sdsStateTravelled.InsertParameters["StartOdometer"].DefaultValue = "0";
                        }

                        if (txtEndOdometer.Value.HasValue)
                        {
                            sdsStateTravelled.InsertParameters["EndOdometer"].DefaultValue = txtEndOdometer.Value.Value.ToString();
                        }
                        else
                        {
                            sdsStateTravelled.InsertParameters["EndOdometer"].DefaultValue = "0";
                        }
                        sdsStateTravelled.InsertParameters["UserName"].DefaultValue = user.UserName;
                        int result = sdsStateTravelled.Insert();
                        DisplayMessage(rgStateTravelled, true, WebHelper.GetSaveSuccess());
                    }
                }
            }
            catch (Exception ex)
            {
                DisplayMessage(rgStateTravelled, false, WebHelper.GetSaveFail() + ". Reason: " + ex.Message);
                e.Canceled = true;
            }
        }
    }

    protected void StateTravelled_UpdateCommand(object source, GridCommandEventArgs e)
    {
        MembershipUser user = Membership.GetUser();
        if (user != null)
        {
            try
            {
                if (e.CommandName == RadGrid.UpdateCommandName)
                {
                    if (e.Item is GridEditFormItem)
                    {
                        //Get the GridEditableItem of the RadGrid    
                        GridEditFormItem item = (GridEditFormItem)e.Item;

                        //Get the primary key value using the DataKeyValue.    
                        string travelledID = item.GetDataKeyValue("TravelledID").ToString();
                        //Access the textbox from the edit form template
                        RadComboBox rcmbStateName = (RadComboBox)item.FindControl("rcmbStateName");
                        RadNumericTextBox txtStartOdometer = (RadNumericTextBox)item.FindControl("txtStartOdometer");
                        RadNumericTextBox txtEndOdometer = (RadNumericTextBox)item.FindControl("txtEndOdometer");

                        sdsStateTravelled.UpdateParameters["TravelledID"].DefaultValue = travelledID;
                        sdsStateTravelled.UpdateParameters["StateID"].DefaultValue = rcmbStateName.SelectedValue.ToString();

                        if (txtStartOdometer.Value.HasValue)
                        {
                            sdsStateTravelled.UpdateParameters["StartOdometer"].DefaultValue = txtStartOdometer.Value.Value.ToString();
                        }
                        else
                        {
                            sdsStateTravelled.UpdateParameters["StartOdometer"].DefaultValue = "0";
                        }

                        if (txtEndOdometer.Value.HasValue)
                        {
                            sdsStateTravelled.UpdateParameters["EndOdometer"].DefaultValue = txtEndOdometer.Value.Value.ToString();
                        }
                        else
                        {
                            sdsStateTravelled.UpdateParameters["EndOdometer"].DefaultValue = "0";
                        }
                        sdsStateTravelled.UpdateParameters["UserName"].DefaultValue = user.UserName;
                        int result = sdsStateTravelled.Update();
                        DisplayMessage(rgStateTravelled, true, WebHelper.GetUpdateSuccess());
                    }
                }
            }
            catch (Exception ex)
            {
                DisplayMessage(rgStateTravelled, false, WebHelper.GetUpdateFail() + ". Reason: " + ex.Message);
                e.Canceled = true;
            }
        }
    }

    #endregion

    #region Trip - Incidents

    protected void imgActiveTripIncident_Click(object sender, EventArgs e)
    {
        MembershipUser user = Membership.GetUser();
        if (user != null)
        {
            string id = ((ImageButton)sender).CommandArgument.ToString();
            sdsSoftDeleteTripIncident.UpdateParameters["IncidentID"].DefaultValue = id;
            sdsSoftDeleteTripIncident.UpdateParameters["UserName"].DefaultValue = user.UserName;
            sdsSoftDeleteTripIncident.Update();
            rgTripIncidents.Rebind();
        }
    }

    protected void TripIncidents_ItemDeleted(object source, GridDeletedEventArgs e)
    {
        String id = e.Item.GetDataKeyValue("IncidentID").ToString();
        if (e.Exception != null)
        {
            e.ExceptionHandled = true;
            DisplayMessage(rgTripIncidents, false, "Incident " + id + " cannot be deleted. Reason: " + e.Exception.Message);
        }
        else
        {
            if (e.AffectedRows > 0)
            {
                DisplayMessage(rgTripIncidents, true, "Incident " + id + " deleted.");
            }
            else
            {
                DisplayMessage(rgTripIncidents, false, "Incident " + id + " cannot be deleted. Reason: It is in active state");
            }
        }
    }

    protected void TripIncidents_InsertCommand(object source, GridCommandEventArgs e)
    {
        MembershipUser user = Membership.GetUser();
        if (user != null)
        {
            try
            {
                if (e.CommandName == "PerformInsert")
                {
                    if (e.Item is GridEditFormItem)
                    {
                        //Get the GridEditableItem of the RadGrid    
                        GridEditFormItem item = (GridEditFormItem)e.Item;

                        //Access the textbox from the edit form template
                        RadDatePicker rdtpIncidentDate = (RadDatePicker)item.FindControl("rdtpIncidentDate");
                        RadComboBox rcmbIncidentTypes = (RadComboBox)item.FindControl("rcmbIncidentTypes");
                        RadComboBox rcmbStateName = (RadComboBox)item.FindControl("rcmbStateName");
                        TextBox txtRemarks = (TextBox)item.FindControl("txtRemarks");

                        sdsTripIncidents.InsertParameters["TripID"].DefaultValue = hfTripID.Value;
                        
                        if (rdtpIncidentDate.SelectedDate.HasValue)
                        {
                            sdsTripIncidents.InsertParameters["IncidentDate"].DefaultValue = rdtpIncidentDate.SelectedDate.Value.ToShortDateString();
                        }
                        else
                        {
                            sdsTripIncidents.InsertParameters["IncidentDate"].DefaultValue = DBNull.Value.ToString();
                        }
                        sdsTripIncidents.InsertParameters["IncidentTypeID"].DefaultValue = rcmbIncidentTypes.SelectedValue.ToString();
                        sdsTripIncidents.InsertParameters["StateID"].DefaultValue = rcmbStateName.SelectedValue.ToString();
                        sdsTripIncidents.InsertParameters["Remarks"].DefaultValue = txtRemarks.Text.Trim();
                        sdsTripIncidents.InsertParameters["UserName"].DefaultValue = user.UserName;
                        int result = sdsTripIncidents.Insert();
                        DisplayMessage(rgStateTravelled, true, WebHelper.GetSaveSuccess());
                    }
                }
            }
            catch (Exception ex)
            {
                DisplayMessage(rgStateTravelled, false, WebHelper.GetSaveFail() + ". Reason: " + ex.Message);
                e.Canceled = true;
            }
        }
    }

    protected void TripIncidents_UpdateCommand(object source, GridCommandEventArgs e)
    {
        MembershipUser user = Membership.GetUser();
        if (user != null)
        {
            try
            {
                if (e.CommandName == RadGrid.UpdateCommandName)
                {
                    if (e.Item is GridEditFormItem)
                    {
                        //Get the GridEditableItem of the RadGrid    
                        GridEditFormItem item = (GridEditFormItem)e.Item;

                        //Get the primary key value using the DataKeyValue.    
                        string incidentID = item.GetDataKeyValue("IncidentID").ToString();
                        //Access the textbox from the edit form template
                        RadDatePicker rdtpIncidentDate = (RadDatePicker)item.FindControl("rdtpIncidentDate");
                        RadComboBox rcmbIncidentTypes = (RadComboBox)item.FindControl("rcmbIncidentTypes");
                        RadComboBox rcmbStateName = (RadComboBox)item.FindControl("rcmbStateName");
                        TextBox txtRemarks = (TextBox)item.FindControl("txtRemarks");

                        sdsTripIncidents.UpdateParameters["IncidentID"].DefaultValue = incidentID;
                        if (rdtpIncidentDate.SelectedDate.HasValue)
                        {
                            sdsTripIncidents.UpdateParameters["IncidentDate"].DefaultValue = rdtpIncidentDate.SelectedDate.Value.ToShortDateString();
                        }
                        else
                        {
                            sdsTripIncidents.UpdateParameters["IncidentDate"].DefaultValue = DBNull.Value.ToString();
                        }
                        sdsTripIncidents.UpdateParameters["IncidentTypeID"].DefaultValue = rcmbIncidentTypes.SelectedValue.ToString();
                        sdsTripIncidents.UpdateParameters["StateID"].DefaultValue = rcmbStateName.SelectedValue.ToString();
                        sdsTripIncidents.UpdateParameters["Remarks"].DefaultValue = txtRemarks.Text.Trim();
                        sdsTripIncidents.UpdateParameters["UserName"].DefaultValue = user.UserName;
                        int result = sdsStateTravelled.Update();
                        DisplayMessage(rgStateTravelled, true, WebHelper.GetUpdateSuccess());
                    }
                }
            }
            catch (Exception ex)
            {
                DisplayMessage(rgStateTravelled, false, WebHelper.GetUpdateFail() + ". Reason: " + ex.Message);
                e.Canceled = true;
            }
        }
    }

    #endregion

    void DisplayMessage(RadGrid rgGrid, bool status, String message)
    {
        if (status)
        {
            rgGrid.Controls.Add(new LiteralControl(string.Format("<span style='color:Green'>{0}</span>", message)));
        }
        else
        {
            rgGrid.Controls.Add(new LiteralControl(string.Format("<span style='color:red'>{0}</span>", message)));
        }
    }
}